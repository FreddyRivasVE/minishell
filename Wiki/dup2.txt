1. dup2.
Es una función de bajo nivel que se utiliza para duplicar un descriptor de archivo en un número de
descriptor específico. Esta función es una variante más flexible de dup, ya que permite elegir
explícitamente el número del nuevo descriptor de archivo, cerrando automáticamente cualquier
descriptor ya abierto con ese número antes de realizar la duplicación. Está definida en <unistd.h>
y se encuentra disponible en sistemas Unix y Unix-like.

2. Sintaxis.

int dup2(int oldfd, int newfd);

.- Parámetros.
	.- oldfd: Es el descriptor de archivo que se desea duplicar. Debe ser válido, como un
	descriptor abierto previamente con funciones como open o pipe.
	.- newfd: Es el número del descriptor de archivo en el que se desea realizar la
	duplicación.
	.- Si newfd ya está abierto, se cierra automáticamente antes de reutilizarlo, excepto
	cuando oldfd es igual a newfd.

3. Valor de Retorno.
.- newfd: Retorna el número del descriptor de archivo duplicado si la operación es exitosa.
.- -1: Indica que ocurrió un error. La variable global errno se establece para indicar el tipo de
error.

4. Errores Comunes.
.- EBADF: El descriptor de archivo oldfd no es válido.
.- EINTR: La llamada fue interrumpida por una señal antes de completarse.
.- EMFILE: El límite máximo de descriptores de archivo abiertos para el proceso ha sido alcanzado.
.- EINVAL: Los valores de oldfd y newfd son iguales pero no son válidos.

5. Funcionamiento.
.- El nuevo descriptor de archivo (newfd) apunta al mismo archivo o recurso que el descriptor
original (oldfd).
.- Si newfd es igual a oldfd, no se realiza ninguna operación y dup2 simplemente retorna newfd.
.- Comparte las siguientes propiedades con el descriptor original:
	.- Modo de acceso (lectura, escritura, etc.).
	.- Posición en el archivo (por ejemplo, desplazamiento de lectura/escritura).
	.- Configuraciones del archivo.

6. Ejemplo Básico.
El siguiente ejemplo muestra cómo redirigir la salida estándar (stdout) a un archivo utilizando
dup2:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main()
{
	// Abrir un archivo en modo escritura
	int fd = open("salida.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (fd == -1)
	{
		perror("Error al abrir el archivo");
		return 1;
	}
	// Redirigir stdout al archivo
	if (dup2(fd, 1) == -1) // Duplicar fd en stdout (descriptor 1)
	{
		perror("Error al redirigir stdout");
		close(fd);
		return 1;
	}
	// Cerrar el descriptor original, ya que no es necesario
	close(fd);
	// Escribir a stdout (redirigido al archivo)
	printf("Este mensaje se escribe en el archivo 'salida.txt'.\n");
	return 0;
}
En este ejemplo:
.- dup2 redirige la salida estándar al archivo salida.txt.
.- El mensaje de printf se escribe en el archivo en lugar de la consola.

7. Comparación entre dup y dup2.

Característica		dup				dup2
Nuevo Descriptor	El sistema elige el menor	El descriptor puede ser 
			descriptor disponible.		especificado por el usuario.					
Cierre Automático	No cierra descriptores		Cierra automáticamente
			existentes.			newfd antes de reutilizarlo.	
Uso Común		Duplicación básica de		Redirección específica de
			descriptores.			descriptores.

8. Casos de Uso Comunes.
.- Redirección de Entrada/Salida: dup2 es ideal para redirigir flujos estándar como stdin, stdout
y stderr.
.- Manipulación de Piezas de Software: Utilizado en shells y aplicaciones que ejecutan comandos y
necesitan redirigir flujos entre procesos.
.- Gestión de Procesos Hijos: Junto con fork, permite redirigir flujos en procesos hijos para
coordinar la entrada/salida.

9. Ejemplo con fork.
El siguiente ejemplo demuestra cómo redirigir la salida estándar de un proceso hijo a un archivo:

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>

int main()
{
	pid_t pid = fork();
	if (pid == -1)
	{
		perror("Error al crear el proceso hijo");
		return 1;
	}
	else if (pid == 0)
	{
		// Código del hijo: redirigir stdout a un archivo
		int fd = open("salida_hijo.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
		if (fd == -1)
		{
			perror("Error al abrir el archivo");
			return 1;
		}
		if (dup2(fd, 1) == -1) { // Redirigir stdout
		perror("Error al redirigir stdout");
		close(fd);
		return 1;
	}
	close(fd); // Cerrar el descriptor original
	printf("Este mensaje se escribe en 'salida_hijo.txt'.\n");
	return 0;
	}
	else
	{
		// Código del padre: esperar al hijo
		wait(NULL);
		printf("El proceso hijo ha terminado.\n");
	}
	return 0;
}

10. Consideraciones Importantes.
.- cierre de Descriptores: Asegúrate de cerrar los descriptores originales cuando ya no sean
necesarios para evitar fugas de recursos.
.- Control de Errores: Siempre verifica el valor de retorno de dup2 para manejar casos de error,
especialmente en sistemas con límites estrictos de descriptores.
.- Compatibilidad y Portabilidad: dup2 es estándar en sistemas Unix y Unix-like, pero en sistemas
más antiguos o diferentes entornos puedes usar alternativas específicas.