1. tgetent.
Es parte de la biblioteca terminfo, que se utiliza para acceder a la base de datos de capacidades de
terminales en sistemas Unix y Unix-like. Esta base de datos contiene descripciones de las capacidades y
características de diferentes tipos de terminales, como secuencias de escape para control de cursor,
colores, teclas especiales, entre otras.
tgetent es la primera función que se invoca al trabajar con la base de datos terminfo, ya que inicializa
las estructuras necesarias para obtener información sobre un terminal específico.

2. Sintaxis.

int tgetent(char *bp, const char *name);

.- Parámetros.
	.- bp (buffer opcional): Si no es NULL, debe ser un puntero a un bloque de memoria
	suficientemente grande como para contener toda la información sobre el terminal. En sistemas
	modernos, generalmente no es necesario proporcionar este parámetro porque se maneja
	internamente.
	Si es NULL, la memoria se gestionará automáticamente.
	.- name: Es una cadena que contiene el nombre del tipo de terminal para el cual deseas cargar
	información. Este nombre generalmente está definido en la variable de entorno TERM.

3. Valor de Retorno.
.- 1: Indica que la entrada correspondiente al nombre del terminal se encontró y cargó correctamente.
.- 0: Indica que no se encontró una entrada para el terminal especificado.
.- -1: Indica un error al intentar acceder a la base de datos terminfo o termcap.

4. Funcionamiento.
La función tgetent se utiliza como primer paso para acceder a la base de datos de terminales.
Internamente:
	.- Busca en la base de datos terminfo la entrada correspondiente al tipo de terminal
	especificado por name.
	.- Carga la descripción del terminal en un área de memoria.
	.- Prepara el entorno para que otras funciones relacionadas, como tgetstr y tputs, puedan
	recuperar capacidades específicas del terminal.
	.- La función no debe ser invocada varias veces en el mismo programa para el mismo terminal,
	ya que es una operación costosa.

5. Ejemplo Básico.
Este ejemplo muestra cómo usar tgetent para inicializar la información del terminal y verificar si la
operación fue exitosa:

#include <stdio.h>
#include <stdlib.h>
#include <termcap.h>

int main()
{
	char *term = getenv("TERM"); // Obtener el tipo de terminal desde la variable de entorno
	if (term == NULL)
	{
		fprintf(stderr, "La variable de entorno TERM no está definida.\n");
		return 1;
	}
	// Inicializar el entorno terminfo para el terminal actual
	if (tgetent(NULL, term) != 1)
	{
		fprintf(stderr, "Error al inicializar terminfo para el terminal: %s\n", term);
		return 1;
	}
	printf("Información del terminal %s cargada con éxito.\n", term);
	return 0;
}
Explicación del Flujo:
.- Se obtiene el tipo de terminal desde la variable de entorno TERM.
.- Se invoca tgetent para cargar la descripción del terminal en la base de datos.
.- Si tgetent tiene éxito, se pueden utilizar otras funciones de la biblioteca terminfo para recuperar
capacidades específicas del terminal.

6. Funciones Relacionadas.
.- Una vez que se ha inicializado el terminal con tgetent, se pueden usar otras funciones para recuperar
información específica:
	.- tgetstr: Recupera cadenas de control del terminal (por ejemplo, secuencias de escape para
	mover el cursor o borrar la pantalla).
	.- tgetnum: Recupera valores numéricos asociados con capacidades específicas del terminal (por
	ejemplo, número de columnas o líneas de la pantalla).
	.- tgetflag: Recupera valores booleanos que indican si una capacidad específica está disponible
	en el terminal.
	.- tputs: Envía cadenas de control al terminal con un control adicional sobre la velocidad de
	impresión.

7. Casos de Uso Comunes.
.- Compatibilidad con Múltiples Terminales: Permite a las aplicaciones personalizar sus salidas y
comportamientos según las capacidades específicas del terminal del usuario.
.- Programas Interactivos: Usado en herramientas como editores de texto (por ejemplo, vim) o shells
(por ejemplo, bash) para manejar secuencias de escape de terminales.
.- Control Preciso del Terminal: Acceder a configuraciones específicas, como colores, control de cursor
y teclas especiales.

8. Consideraciones Importantes.
.- Dependencia de la Variable TERM: Es fundamental que la variable de entorno TERM esté configurada
correctamente para que tgetent pueda cargar la descripción adecuada del terminal.
.- Portabilidad: Aunque tgetent es ampliamente compatible, algunos sistemas modernos pueden utilizar
bibliotecas alternativas como ncurses, que proporciona funciones similares con características
adicionales.
.- Buffer Opcional (bp): En sistemas modernos, generalmente se pasa NULL para que la gestión de memoria
sea automática. Sin embargo, en sistemas más antiguos, es responsabilidad del programador asignar un
buffer lo suficientemente grande.

9. Limitaciones.
.- Complejidad: La configuración y uso de la biblioteca terminfo puede ser compleja debido a la cantidad
de detalles técnicos sobre los terminales.
.- Deprecación en Sistemas Modernos: En muchos entornos, tgetent y sus funciones relacionadas han sido
reemplazadas por bibliotecas más avanzadas, como ncurses.