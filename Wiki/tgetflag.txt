1. tgetflag.
Es parte de la biblioteca terminfo (o, en algunos sistemas, termcap), la cual se utiliza para trabajar
con capacidades de terminales. tgetflag se emplea específicamente para recuperar el valor de una
capacidad booleana de un terminal que fue previamente inicializado usando la función tgetent.

2. Propósito de tgetflag.
tgetflag verifica si una característica específica del terminal está disponible o habilitada. Las
capacidades booleanas representan atributos que se pueden responder con "sí" o "no" (por ejemplo, si un
terminal tiene soporte para retroceso o si utiliza colores básicos).

3. Sintaxis.

int tgetflag(const char *id);

.- Parámetros.
	.- id: Es una cadena que contiene un identificador de dos caracteres que representa una
	capacidad booleana del terminal. Estos identificadores están definidos en la base de datos
	terminfo.
	.- Ejemplo: "bs" para verificar si el terminal tiene soporte para retrocesos (backspace).

4. Valor de Retorno.
.- 1: Indica que la capacidad booleana está disponible o está habilitada en el terminal.
.- 0: Indica que la capacidad booleana no está habilitada o no está definida en el terminal.

5. Funcionamiento General.
.- La función tgetent debe haber sido llamada previamente para cargar la descripción del terminal desde
la base de datos terminfo.
.- tgetflag consulta esa descripción cargada para determinar si una capacidad booleana está habilitada
o no.
.- La información que proporciona depende de los valores almacenados en la base de datos terminfo, que
describe las capacidades específicas del terminal.

6. Ejemplo Básico.
El siguiente programa comprueba si el terminal admite retrocesos utilizando la capacidad booleana "bs":

#include <stdio.h>
#include <stdlib.h>
#include <termcap.h>

int main()
{
	char *term = getenv("TERM"); // Obtener el tipo de terminal desde la variable de entorno
	if (term == NULL)
	{
		fprintf(stderr, "La variable de entorno TERM no está definida.\n");
		return 1;
	}
	// Inicializar el entorno terminfo para el terminal actual
	if (tgetent(NULL, term) != 1)
	{
		fprintf(stderr, "Error al inicializar terminfo para el terminal: %s\n", term);
		return 1;
	}
	// Verificar si el terminal soporta retrocesos
	if (tgetflag("bs"))
	{
		printf("El terminal admite retrocesos.\n");
	}
	else
	{
		printf("El terminal NO admite retrocesos.\n");
	}
	return 0;
}
Salida Esperada:
.- Si el terminal admite retrocesos: El terminal admite retrocesos.
.- Si no admite retrocesos: El terminal NO admite retrocesos.

7. Ejemplo Adicional: Verificar Varias Capacidades Booleanas.
El siguiente código verifica múltiples características del terminal utilizando diferentes
identificadores de capacidades:

#include <stdio.h>
#include <stdlib.h>
#include <termcap.h>

int main()
{
	char *term = getenv("TERM");
	if (term == NULL)
	{
		fprintf(stderr, "La variable de entorno TERM no está definida.\n");
		return 1;
	}
	if (tgetent(NULL, term) != 1)
	{
		fprintf(stderr, "Error al inicializar terminfo para el terminal: %s\n", term);
		return 1;
	}
	// Verificar capacidades booleanas del terminal
	if (tgetflag("bs")) 
	{
		printf("El terminal admite retrocesos (bs).\n");
	}
	if (tgetflag("hc"))
	{
		printf("El terminal es un hardcopy terminal (hc).\n");
	}
	if (tgetflag("km"))
	{
		printf("El terminal tiene un teclado que envía secuencias de escape (km).\n");
	}
	return 0;
}

8. Identificadores Comunes para tgetflag.
Aquí hay algunos identificadores booleanos de terminal comunes que tgetflag puede verificar:

Identificador	Descripción
bs		El terminal admite retrocesos (backspace).
hc		El terminal es un terminal de impresión (hardcopy).
km		El terminal tiene un teclado que envía secuencias (ESC).
am		El terminal tiene ajuste automático de margen (auto-wrap).
os		El terminal puede sobrescribir caracteres existentes.

9. Casos de Uso Comunes.
.- Adaptación a Terminales Diferentes: Detectar características específicas para ajustar el
comportamiento de una aplicación interactiva según las capacidades del terminal.
Ejemplo: decidir si usar retrocesos o manejar márgenes automáticos.
.- Compatibilidad: Asegurarse de que un programa se ejecute correctamente en una variedad de terminales
con diferentes características.
.- Programas como Editores de Texto: Editores como vim o nano pueden usar capacidades booleanas para
determinar qué funciones habilitar en diferentes terminales.

10. Consideraciones Importantes.
.- Inicialización Previa: Es obligatorio llamar a tgetent antes de usar tgetflag, ya que esta función
carga la descripción del terminal.
.- Portabilidad: Aunque tgetflag es ampliamente compatible en sistemas Unix y Unix-like, su dependencia
de terminfo y su integración varían ligeramente entre sistemas.

11. Alternativas Modernas: Bibliotecas modernas como ncurses han reemplazado gran parte de la
funcionalidad de termcap/terminfo, proporcionando una API más robusta y flexible.